.. _basics:

The Basics
==========

A Light-Touch, One-Function Package
*************************************

The Team Communication Toolkit is designed to be a **light-touch package**. This means you should need minimal lines of code to get from text data to structured communication features. We have defaults and sample code to help you quickly run the toolkit on your data.

However, we understand that you might have special requirements and need to customize features. Therefore, we offer adjustable "knobs" in the FeatureBuilder (:ref:`feature_builder`).

This overview will provide you with a high-level understanding of the key inputs and assumptions of our toolkit. After reading, refer to the walkthrough in the :ref:`examples` for a detailed discussion.

Demo / Sample Code
*******************

We have provided a simple example file, "featurize.py", and a demo notebook, "demo.ipynb," under our `examples folder <https://github.com/Watts-Lab/team_comm_tools/tree/main/examples>`_ on GitHub.

You can also `access our demo notebook on Google Colab <https://colab.research.google.com/drive/1e8D5h_prRJsGs_N563EvpoQK0uZIAYsJ?usp=sharing>`_, where you can make a copy and run it on your own.

Key Assumptions and Parameters
*******************************

Package Assumptions 
++++++++++++++++++++

1. **Pandas DataFrame**: Your input should be a `Pandas dataframe <https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html>`_.

2. **Unique Conversation Identifier**: Each conversation in your dataframe needs a unique identifier (defined by **conversation_id_col**), or it can be generated by grouping multiple columns (defined by **grouping_keys**).

   * **conversation_id_col** defaults to "conversation_num."
   * If **grouping_keys** are provided, they override the conversation identifier.

3. **Unique Speaker Identifier**: Each speaker in the conversation should have a unique identifier (defined by **speaker_id_col**).

   * **speaker_id_col** defaults to "speaker_nickname."

4. **Single Utterance Column**: The text of a single utterance should be in one column in the dataframe (defined by **message_col**).

   * **message_col** defaults to "message."
   * Ensure you've segmented and preprocessed conversational transcripts into "utterances" or "turns". We do not accept open-ended transcripts.

5. **Temporal Order**: Messages should be in **temporal order**. Earlier rows are assumed to be utterances that occurred before later rows.

6. **Timestamps**: If timestamps for each message exist, they should be in a column (**timestamp_col**), or in two columns. **timestamp_col** can be a string or a tuple of (start, end), with the first item as the start time and the second item as the end time.

7. **Additional Columns**: Columns not required as inputs (conversation identifier, speaker identifier, message, and timestamp column(s)) are assumed to be metadata and won't be summarized in the featurization process.

8. **Vector Data Cache**: Your data's vector data will be cached in **vector_directory**. This directory will be created if it doesnâ€™t exist, but its contents should be reserved for cached vector files.

9. **Output Files**: We generate three outputs: **output_file_path_chat_level** (Utterance- or Chat-Level Features), **output_file_path_user_level** (Speaker- or User-Level Features), and **output_file_path_conv_level** (Conversation-Level Features).

   * This should be a *path*, not just a filename. For example, "./my_file.csv", not just "my_file.csv."

10. **Custom Features**: To save time, we exclude features that require computing sentence vectors by default. To access these features, use the **custom_features** parameter in your FeatureBuilder:

    .. code-block:: python

       # Add any of these features depending on your preference.
       custom_features = [
               "(BERT) Mimicry",
               "Moving Mimicry",
               "Forward Flow",
               "Discursive Diversity"]

11. **Summarizing Numeric Features**: All numeric utterance-level features are **summarizable**. Aggregations (e.g., "mean level of positivity") will appear in the Conversation-level data.

Customizable Parameters
++++++++++++++++++++++++

Here are some parameters that can be customized. For more details, refer to the :ref:`examples` and :ref:`feature_builder`.

1. **analyze_first_pct**: Analyze only the first portion (X% of utterances) of a conversation.

2. **turns**: Combine successive messages by the same individual into a single "turn."

3. **cumulative_grouping** and **within_task**: Perform nested grouping, analyzing "sub-conversations" within a larger conversation together.

4. **ner_training_df** and **ner_cutoff**: Measure the number of named entities in each utterance (see :ref:`named_entity_recognition`).

5. **regenerate_vectors**: Force-regenerate vector data even if it already exists.