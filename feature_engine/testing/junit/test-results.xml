<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="12" skipped="0" tests="32" time="0.614" timestamp="2024-03-28T21:07:18.189793" hostname="ist2-16352.apn.wlan.private.upenn.edu"><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row0]" time="0.001"><failure message="assert 4 == 9">row = (0, id                                                                      1
conversation_num                        ...       0
num_parentheses                                                         0
Name: 0, Length: 120, dtype: object)

    @pytest.mark.parametrize("row", test_chat_df.iterrows())
    def test_chat_unit_equality(row):
        actual = row[1][row[1]['expected_column']]
        expected = row[1]['expected_value']
    
        try:
&gt;           assert actual == expected
E           assert 4 == 9

test_feature_metrics.py:28: AssertionError</failure></testcase><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row1]" time="0.001"><failure message="assert 2 == 3">row = (1, id                                                                      2
conversation_num                        ...       0
num_parentheses                                                         0
Name: 1, Length: 120, dtype: object)

    @pytest.mark.parametrize("row", test_chat_df.iterrows())
    def test_chat_unit_equality(row):
        actual = row[1][row[1]['expected_column']]
        expected = row[1]['expected_value']
    
        try:
&gt;           assert actual == expected
E           assert 2 == 3

test_feature_metrics.py:28: AssertionError</failure></testcase><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row2]" time="0.001" /><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row3]" time="0.001"><failure message="assert 0 == 3">row = (3, id                                                                           4
conversation_num                   ...  0
num_parentheses                                                              0
Name: 3, Length: 120, dtype: object)

    @pytest.mark.parametrize("row", test_chat_df.iterrows())
    def test_chat_unit_equality(row):
        actual = row[1][row[1]['expected_column']]
        expected = row[1]['expected_value']
    
        try:
&gt;           assert actual == expected
E           assert 0 == 3

test_feature_metrics.py:28: AssertionError</failure></testcase><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row4]" time="0.001" /><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row5]" time="0.001" /><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row6]" time="0.001" /><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row7]" time="0.001" /><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row8]" time="0.001" /><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row9]" time="0.001" /><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row10]" time="0.001"><failure message="assert 1 == 3">row = (10, id                                                11
conversation_num                                   1
speaker...                           0
num_parentheses                                    0
Name: 10, Length: 120, dtype: object)

    @pytest.mark.parametrize("row", test_chat_df.iterrows())
    def test_chat_unit_equality(row):
        actual = row[1][row[1]['expected_column']]
        expected = row[1]['expected_value']
    
        try:
&gt;           assert actual == expected
E           assert 1 == 3

test_feature_metrics.py:28: AssertionError</failure></testcase><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row11]" time="0.001" /><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row12]" time="0.001"><failure message="assert 1 == 3">row = (12, id                                                 13
conversation_num                                    1
speak...                          0
num_parentheses                                     0
Name: 12, Length: 120, dtype: object)

    @pytest.mark.parametrize("row", test_chat_df.iterrows())
    def test_chat_unit_equality(row):
        actual = row[1][row[1]['expected_column']]
        expected = row[1]['expected_value']
    
        try:
&gt;           assert actual == expected
E           assert 1 == 3

test_feature_metrics.py:28: AssertionError</failure></testcase><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row13]" time="0.001"><failure message="assert 0 == 3">row = (13, id                                                                          14
conversation_num                  ... 0
num_parentheses                                                              0
Name: 13, Length: 120, dtype: object)

    @pytest.mark.parametrize("row", test_chat_df.iterrows())
    def test_chat_unit_equality(row):
        actual = row[1][row[1]['expected_column']]
        expected = row[1]['expected_value']
    
        try:
&gt;           assert actual == expected
E           assert 0 == 3

test_feature_metrics.py:28: AssertionError</failure></testcase><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row14]" time="0.001"><failure message="assert 8 == 3">row = (14, id                                                                          15
conversation_num                  ... 0
num_parentheses                                                              0
Name: 14, Length: 120, dtype: object)

    @pytest.mark.parametrize("row", test_chat_df.iterrows())
    def test_chat_unit_equality(row):
        actual = row[1][row[1]['expected_column']]
        expected = row[1]['expected_value']
    
        try:
&gt;           assert actual == expected
E           assert 8 == 3

test_feature_metrics.py:28: AssertionError</failure></testcase><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row15]" time="0.001"><failure message="assert 0 == 3">row = (15, id                                                                          16
conversation_num                  ... 0
num_parentheses                                                              0
Name: 15, Length: 120, dtype: object)

    @pytest.mark.parametrize("row", test_chat_df.iterrows())
    def test_chat_unit_equality(row):
        actual = row[1][row[1]['expected_column']]
        expected = row[1]['expected_value']
    
        try:
&gt;           assert actual == expected
E           assert 0 == 3

test_feature_metrics.py:28: AssertionError</failure></testcase><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row16]" time="0.001" /><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row17]" time="0.001" /><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row18]" time="0.001"><failure message="assert 2 == 4">row = (18, id                                                                          19
conversation_num                  ... 0
num_parentheses                                                              0
Name: 18, Length: 120, dtype: object)

    @pytest.mark.parametrize("row", test_chat_df.iterrows())
    def test_chat_unit_equality(row):
        actual = row[1][row[1]['expected_column']]
        expected = row[1]['expected_value']
    
        try:
&gt;           assert actual == expected
E           assert 2 == 4

test_feature_metrics.py:28: AssertionError</failure></testcase><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row19]" time="0.002" /><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row20]" time="0.001" /><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row21]" time="0.001" /><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row22]" time="0.001" /><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row23]" time="0.001" /><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row24]" time="0.001"><failure message="assert 1 == 2">row = (24, id                                                                          25
conversation_num                  ... 0
num_parentheses                                                              0
Name: 24, Length: 120, dtype: object)

    @pytest.mark.parametrize("row", test_chat_df.iterrows())
    def test_chat_unit_equality(row):
        actual = row[1][row[1]['expected_column']]
        expected = row[1]['expected_value']
    
        try:
&gt;           assert actual == expected
E           assert 1 == 2

test_feature_metrics.py:28: AssertionError</failure></testcase><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row25]" time="0.001" /><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row26]" time="0.001" /><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row27]" time="0.001" /><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row28]" time="0.001" /><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row29]" time="0.001" /><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row30]" time="0.002"><failure message="assert 1 == 2">row = (30, id                                                            31
conversation_num                                ...               0
num_parentheses                                                1
Name: 30, Length: 120, dtype: object)

    @pytest.mark.parametrize("row", test_chat_df.iterrows())
    def test_chat_unit_equality(row):
        actual = row[1][row[1]['expected_column']]
        expected = row[1]['expected_value']
    
        try:
&gt;           assert actual == expected
E           assert 1 == 2

test_feature_metrics.py:28: AssertionError</failure></testcase><testcase classname="test_feature_metrics" name="test_chat_unit_equality[row31]" time="0.001"><failure message="assert 2 == 4">row = (31, id                                        32
conversation_num                           1
speaker_nickname       ...pses                               0
num_parentheses                            2
Name: 31, Length: 120, dtype: object)

    @pytest.mark.parametrize("row", test_chat_df.iterrows())
    def test_chat_unit_equality(row):
        actual = row[1][row[1]['expected_column']]
        expected = row[1]['expected_value']
    
        try:
&gt;           assert actual == expected
E           assert 2 == 4

test_feature_metrics.py:28: AssertionError</failure></testcase></testsuite></testsuites>